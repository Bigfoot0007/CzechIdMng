import React from 'react';
import ReCAPTCHA from 'react-google-recaptcha';
//
import * as Basic from '../../basic';
import { RecaptchaService } from '../../../services';
import ConfigLoader from '../../../utils/ConfigLoader';

const recaptchaService = new RecaptchaService();

/**
 * Google ReCaptcha compotent. It is a bot protection.
 *
 * @author Filip Mestanek
 */
class Recaptcha extends Basic.AbstractFormComponent {

  constructor(props) {
    super(props);
    this.state = {
      captchaValid: false
    };

    this.enabled = ConfigLoader.getConfig('recaptchaEnabled');
    if (this.enabled == null || this.enabled === false) {
      this.state = {
        captchaValid: true
      };

      this.rendered = false;
      return;
    }

    this.siteKey = ConfigLoader.getConfig('recaptchaSiteKey');
    if (this.siteKey == null) alert('The configuration property "recaptchaSiteKey" not defined!');
  }

  validate() {
    return this.isValid();
  }

  isValid() {
    return this.state.captchaValid;
  }

  /**
   * Called, when the state has changed.
   *
   * @param  {string} value Id of the request generated by Google. If null,
   *                        the ReCaptcha validation has expired.
   */
  recaptchaChange(value) {
    if (value == null) {
      this.setState({ captchaValid: false });
      return;
    }

    recaptchaService.checkResponse(value)
    .then(result => {
      this.setState({ captchaValid: result.success });
    })
    .catch(error => {
      this.addError(error);
    });
  }

  getBody() {
    if (this.rendered === false) return (<div/>);

    return (
      <div>
        <ReCAPTCHA
          ref="recaptcha"
          sitekey={this.siteKey}
          onChange={this.recaptchaChange.bind(this)}
          />
      </div>
    );
  }
}

Recaptcha.propTypes = {
  ...Basic.AbstractFormComponent.propTypes
};

Recaptcha.defaultProps = {
  ...Basic.AbstractFormComponent.defaultProps
};

export default Recaptcha;
